#!/usr/bin/env node
// -*- mode: js -*-
/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

/*
 * Copyright (c) 2015, Joyent, Inc.
 */
var adm = require('../lib/adm');
var cmdln = require('cmdln');
var fs = require('fs');
var util = require('util');
var path = require('path');
var tab = require('tab');

function ManateeAdm() {
    cmdln.Cmdln.call(this, {
        name: 'manatee-adm',
        desc: 'Inspect and administer Manatee'
    });
}
util.inherits(ManateeAdm, cmdln.Cmdln);

/**
 * Prints the version for this manatee-adm (and, hence, manatee itself).  Taken
 * directly from the package.json.
 */
ManateeAdm.prototype.do_version = function (subcmd, opts, args, cb) {
    var self = this;
    if (opts.help) {
        self.do_help('help', {}, [subcmd], cb);
    }

    var file = path.resolve(path.dirname(__dirname), 'package.json');
    var error;
    try {
        var s = fs.readFileSync(file);
        var j = JSON.parse(s);
        console.log(j.version);
    } catch (err) {
        error = err;
    }
    return (cb(error));
};
ManateeAdm.prototype.do_version.options = [ {
    names: ['help', 'h'],
    type: 'bool',
    help: 'Show this help'
}];
ManateeAdm.prototype.do_version.help = (
    'Shows the version of manatee, taken from the package.json. \n' +
    '\n' +
    'Usage:\n' +
    '    {{name}} version [OPTIONS]\n' +
    '\n' +
    '{{options}}'
);

/**
 * Display the current status of the manatee shard(s).
 */
ManateeAdm.prototype.do_status = function (subcmd, opts, args, cb) {
    var self = this;
    if (opts.help) {
        self.do_help('help', {}, [subcmd], cb);
    }

    if (!opts.zk) {
        self.do_help('help', {}, [subcmd], cb);
    }

    adm.status(opts, function (err, status) {
        if (err) {
            return cb(err);
        } else {
            console.log(JSON.stringify(status));
            return cb();
        }
    });
};
ManateeAdm.prototype.do_status.options = [ {
    names: ['help', 'h'],
    type: 'bool',
    help: 'Show this help'
}, {
    names: ['legacyOrderMode', 'l'],
    type: 'bool',
    helpArg: 'LEGACY_ORDER_MODE',
    help: 'Show what the status is based on what is in the ZK election path ' +
        'rather than what is in the cluster state object.',
    default: false
}, {
    names: ['shard', 's'],
    type: 'string',
    helpArg: 'SHARD',
    help: 'The manatee shard to stat. If empty status will show all shards'
}, {
    names: ['zk', 'z'],
    type: 'string',
    helpArg: 'ZOOKEEPER_URL',
    help: 'The zookeeper connection string. e.g. 127.0.0.1:2181',
    default: process.env.ZK_IPS
}];
ManateeAdm.prototype.do_status.help = (
    'Show status of a manatee shard. \n' +
    '\n' +
    'Usage:\n' +
    '    {{name}} status [OPTIONS]\n' +
    '\n' +
    '{{options}}'
);

/**
 * Display the current cluster state.
 */
ManateeAdm.prototype.do_state = function (subcmd, opts, args, cb) {
    var self = this;
    if (opts.help) {
        self.do_help('help', {}, [subcmd], cb);
    }

    if (!opts.zk) {
        self.do_help('help', {}, [subcmd], cb);
    }

    adm.state(opts, function (err, state) {
        if (err) {
            return cb(err);
        } else {
            console.log(JSON.stringify(state));
            return cb();
        }
    });
};
ManateeAdm.prototype.do_state.options = [ {
    names: ['help', 'h'],
    type: 'bool',
    help: 'Show this help'
}, {
    names: ['shard', 's'],
    type: 'string',
    helpArg: 'SHARD',
    help: 'Get the state for this manatee shard.',
    default: process.env.SHARD
}, {
    names: ['zk', 'z'],
    type: 'string',
    helpArg: 'ZOOKEEPER_URL',
    help: 'The zookeeper connection string. e.g. 127.0.0.1:2181',
    default: process.env.ZK_IPS
}];
ManateeAdm.prototype.do_state.help = (
    'Show the cluster state stored in ZK for this shard. \n' +
    '\n' +
    'Usage:\n' +
    '    {{name}} state [OPTIONS]\n' +
    '\n' +
    '{{options}}'
);

/**
 * Display the current (raw) active nodes for a shard.
 */
ManateeAdm.prototype.do_active = function (subcmd, opts, args, cb) {
    var self = this;
    if (opts.help) {
        self.do_help('help', {}, [subcmd], cb);
    }

    if (!opts.zk) {
        self.do_help('help', {}, [subcmd], cb);
    }

    adm.active(opts, function (err, active) {
        if (err) {
            return cb(err);
        } else {
            console.log(JSON.stringify(active));
            return cb();
        }
    });
};
ManateeAdm.prototype.do_active.options = [ {
    names: ['help', 'h'],
    type: 'bool',
    help: 'Show this help'
}, {
    names: ['shard', 's'],
    type: 'string',
    helpArg: 'SHARD',
    help: 'Get the active for this manatee shard.',
    default: process.env.SHARD
}, {
    names: ['zk', 'z'],
    type: 'string',
    helpArg: 'ZOOKEEPER_URL',
    help: 'The zookeeper connection string. e.g. 127.0.0.1:2181',
    default: process.env.ZK_IPS
}];
ManateeAdm.prototype.do_active.help = (
    'Display the current active peers for a shard. \n' +
    'Since this displays exactly what is in zookeeper, this may show\n' +
    'multiple entries for the same manatee.\n' +
    '\n' +
    'Usage:\n' +
    '    {{name}} active [OPTIONS]\n' +
    '\n' +
    '{{options}}'
);

/**
 * Backfill the cluster state.
 */
ManateeAdm.prototype.do_state_backfill = function (subcmd, opts, args, cb) {
    var self = this;
    if (opts.help) {
        self.do_help('help', {}, [subcmd], cb);
    }

    if (!opts.zk) {
        self.do_help('help', {}, [subcmd], cb);
    }

    adm.stateBackfill(opts, function (err, state) {
        if (err) {
            return cb(err);
        } else {
            console.log('Ok.');
            return cb();
        }
    });
};
ManateeAdm.prototype.do_state_backfill.options = [ {
    names: ['help', 'h'],
    type: 'bool',
    help: 'Show this help'
}, {
    names: ['shard', 's'],
    type: 'string',
    helpArg: 'SHARD',
    help: 'Backfill the state for this manatee shard.',
    default: process.env.SHARD
}, {
    names: ['ignorePrompts', 'y'],
    type: 'bool',
    helpArg: 'IGNORE_PROMPTS',
    help: 'Set this to skip prompts (is dangerous) ',
    default: false
}, {
    names: ['zk', 'z'],
    type: 'string',
    helpArg: 'ZOOKEEPER_URL',
    help: 'The zookeeper connection string. e.g. 127.0.0.1:2181',
    default: process.env.ZK_IPS
}];
ManateeAdm.prototype.do_state_backfill.help = (
    'Backfill the cluster state for the shard, only if no state exists. \n' +
    '\n' +
    '!!! WARNING !!! \n' +
    'This will only work when no cluster state has been written. \n' +
    'It is only to be used when moving to Manatee using the persistent \n' +
    'cluster state in ZK. \n' +
    '\n' +
    'This tool may backfill the cluster state in a surprising order: \n' +
    'Primary -> Primary, Async -> Sync, Sync -> Async' +
    'The reason for this is so that when the Async is deployed first, it \n' +
    'will set itself up as a sync, then when the sync is deployed it will \n' +
    'set itself up as async.  This facilitates the migration to using \n' +
    'cluster state rather than election order to decide topology. \n' +
    '\n' +
    'Usage:\n' +
    '    {{name}} state [OPTIONS]\n' +
    '\n' +
    '{{options}}'
);

/**
 * Check the status of a manatee lock
 */
ManateeAdm.prototype.do_check_lock = function (subcmd, opts, args, cb) {
    var self = this;
    if (opts.help) {
        self.do_help('help', {}, [subcmd], cb);
    }

    if (!opts.path) {
        self.do_help('help', {}, [subcmd], cb);
    }

    if (!opts.zk) {
        self.do_help('help', {}, [subcmd], cb);
    }

    adm.checkLock(opts, function (err, stat) {
        if (err || stat) {
            return cb(new Error('lock exists or unable to get lock'));
        }

        return cb();
    });
};
ManateeAdm.prototype.do_check_lock.options = [ {
    names: ['help', 'h'],
    type: 'bool',
    help: 'Show this help'
}, {
    names: ['path', 'p'],
    type: 'string',
    helpArg: 'LOCK_PATH',
    help: 'The manatee lock path in ZK'
}, {
    names: ['zk', 'z'],
    type: 'string',
    helpArg: 'ZOOKEEPER_URL',
    help: 'The zookeeper connection string. e.g. 127.0.0.1:2181',
    default: process.env.ZK_IPS
}];
ManateeAdm.prototype.do_check_lock.help = (
    'Check the status of a manatee lock. \n' +
    '\n' +
    'Usage:\n' +
    '    {{name}} check_lock [OPTIONS]\n' +
    '\n' +
    '{{options}}'
);


/**
 * Get the state transition history of the shard.
 */
ManateeAdm.prototype.do_history = function (subcmd, opts, args, cb) {
    var self = this;
    var histopts;

    if (opts.help) {
        self.do_help('help', {}, [subcmd], cb);
    }

    if (!opts.shard) {
        console.error('-s / --shard is required');
        self.do_help('help', {}, [subcmd], cb);
    }

    if (!opts.zk) {
        console.error('-z / --zk is required');
        self.do_help('help', {}, [subcmd], cb);
    }

    if (opts.sort != 'zkSeq' && opts.sort != 'time') {
        console.error('-s / --sort must be one of "zkSeq" or "time"');
        self.do_help('help', {}, [subcmd], cb);
    }

    histopts = {
        'zk': opts.zk,
        'shard': opts.shard,
        'sortByTime': opts.sort == 'time'
    };

    adm.history(histopts, function (err, events) {
        var rows, columns, hostwidth;

        if (err) {
            return cb(err);
        }

        if (opts.json) {
            events.forEach(function (evt) {
                console.log(JSON.stringify({
                    'zkSeq': evt['zkSeq'],
                    'time': evt['time'].toISOString(),
                    'state': evt['state']
                }));
            });
            cb();
            return;
        }

        hostwidth = opts.showFullHostnames ? 36 : 8;
        columns = [ {
            'label': 'TIME',
            'width': 24
        }, {
            'label': 'G#',
            'align': 'right',
            'width': 2
        }, {
            'label': 'MODE',
            'width': 5
        }, {
            'label': 'FRZ',
            'width': 3
        }, {
            'label': 'PRIMARY',
            'width': hostwidth
        }, {
            'label': 'SYNC',
            'width': hostwidth
        }, {
            'label': 'ASYNC',
            'width': hostwidth
        }, {
            'label': 'DEPOSED',
            'width': hostwidth
        } ];

        if (opts.verbose) {
            columns.push({ 'label': 'SUMMARY' });
        }

        rows = events.map(function (evt) {
            var st, p, s, a, d;

            st = evt['state'];
            p = st['primary']['zoneId'];
            s = st['sync'] !== null ? st['sync']['zoneId'] : '-';
            a = st['async'].length === 0 ? '-' :
                st['async'].map(function (async) {
                    if (opts.showFullHostnames)
                        return (async['zoneId']);
                    return (async['zoneId'].substr(0, 8));
                });
            d = st['deposed'].length === 0 ? '-' :
                st['deposed'].map(function (deposed) {
                    if (opts.showFullHostnames)
                        return (deposed['zoneId']);
                    return (deposed['zoneId'].substr(0, 8));
                });

            if (!opts.showFullHostnames) {
                p = p.substr(0, 8);
                s = s.substr(0, 8);
            }

            return ({
                'TIME': evt['time'].toISOString(),
                'G#': st['generation'],
                'MODE': st['oneNodeWriteMode'] ? 'singl' : 'multi',
                'FRZ': st['freeze'] ? 'frz' : '-',
                'PRIMARY': p,
                'SYNC': s,
                'ASYNC': a,
                'DEPOSED': d,
                'SUMMARY': evt['comment']
            });
        });

        tab.emitTable({
            'columns': columns,
            'rows': rows
        });

        return cb();
    });
};
ManateeAdm.prototype.do_history.options = [ {
    names: ['showFullHostnames'],
    type: 'bool',
    help: 'Show full hostnames (instead of abbreviated versions)'
}, {
    names: ['help', 'h'],
    type: 'bool',
    help: 'Show this help'
}, {
    names: ['json', 'j'],
    type: 'bool',
    help: 'Emit stable JSON output'
}, {
    names: ['shard', 's'],
    type: 'string',
    helpArg: 'SHARD',
    help: 'The manatee shard name',
    default: process.env.SHARD
}, {
    names: [ 'sort' ],
    type: 'string',
    helpArg: 'SORTFIELD',
    help: 'Sort field (either "zkSeq" (default) or "time")',
    default: 'zkSeq'
}, {
    names: [ 'verbose', 'v' ],
    type: 'bool',
    help: 'Show human-readable summary of each event'
}, {
    names: ['zk', 'z'],
    type: 'string',
    helpArg: 'ZOOKEEPER_URL',
    help: 'The zookeeper connection string (e.g., 127.0.0.1:2181)',
    default: process.env.ZK_IPS
}];
ManateeAdm.prototype.do_history.help = (
    'Displays history of cluster state changes for this shard. \n' +
    '\n' +
    'Usage:\n' +
    '    {{name}} history [OPTIONS]\n' +
    '\n' +
    '{{options}}'
);

/**
 * Rebuild a manatee peer in a shard.
 */
ManateeAdm.prototype.do_rebuild = function (subcmd, opts, args, cb) {
    var self = this;
    if (opts.help) {
        self.do_help('help', {}, [subcmd], cb);
    }
    if (!opts.config) {
        self.do_help('help', {}, [subcmd], cb);
    }

    try {
        var cfg = JSON.parse(fs.readFileSync(opts.config, 'utf8'));
        opts.config = cfg;
    } catch (e) {
        return cb(e);
    }
    adm.rebuild(opts, function (err) {
        if (!err) {
            console.log('Rebuild successful');
        }
        return (cb(err));
    });
};
ManateeAdm.prototype.do_rebuild.options = [ {
    names: ['help', 'h'],
    type: 'bool',
    help: 'Show this help'
}, {
    names: ['config', 'c'],
    type: 'string',
    helpArg: 'CONFIG',
    help: 'The path to the manatee sitter config to list',
    default: process.env.MANATEE_SITTER_CONFIG
}, {
    names: ['ignorePrompts', 'y'],
    type: 'bool',
    helpArg: 'IGNORE_PROMPTS',
    help: 'Set this to skip prompts (is dangerous) ',
    default: false
}, {
    names: ['zk', 'z'],
    type: 'string',
    helpArg: 'ZOOKEEPER_URL',
    help: 'The zookeeper connection string. e.g. 127.0.0.1:2181',
    default: process.env.ZK_IPS
}];
ManateeAdm.prototype.do_rebuild.help = (
    'Rebuild a manatee zone. \n' +
    '\n' +
    'Usage:\n' +
    '    {{name}} rebuild [OPTIONS]\n' +
    '\n' +
    '{{options}}'
);

/**
 * Freezes a manatee's cluster state so that it won't make any state
 * transitions.
 */
ManateeAdm.prototype.do_freeze = function (subcmd, opts, args, cb) {
    var self = this;
    if (opts.help) {
        self.do_help('help', {}, [subcmd], cb);
    }

    if (!opts.shard) {
        self.do_help('help', {}, [subcmd], cb);
    }

    if (!opts.reason) {
        console.log('!!! -r [reason] is required !!!');
        self.do_help('help', {}, [subcmd], cb);
    }

    adm.freeze(opts, function (err) {
        if (err) {
            return cb(err);
        }

        console.log('Frozen.');
        return cb();
    });
};
ManateeAdm.prototype.do_freeze.options = [ {
    names: ['help', 'h'],
    type: 'bool',
    help: 'Show this help'
}, {
    names: ['reason', 'r'],
    type: 'string',
    helpArg: 'REASON',
    help: 'The reason this shard is being frozen'
}, {
    names: ['shard', 's'],
    type: 'string',
    helpArg: 'SHARD',
    help: 'The manatee shard',
    default: process.env.SHARD
}, {
    names: ['zk', 'z'],
    type: 'string',
    helpArg: 'ZOOKEEPER_URL',
    help: 'The zookeeper connection string. e.g. 127.0.0.1:2181',
    default: process.env.ZK_IPS
}];
ManateeAdm.prototype.do_freeze.help = (
    'Freeze a shard\'s topology. \n' +
    '\n' +
    'Usage:\n' +
    '    {{name}} freeze [OPTIONS]\n' +
    '\n' +
    '{{options}}'
);

/**
 * Unfreezes a manatee's cluster state so that it will make state transitions.
 */
ManateeAdm.prototype.do_unfreeze = function (subcmd, opts, args, cb) {
    var self = this;
    if (opts.help) {
        self.do_help('help', {}, [subcmd], cb);
    }

    if (!opts.shard) {
        self.do_help('help', {}, [subcmd], cb);
    }

    adm.unfreeze(opts, function (err) {
        if (err) {
            return cb(err);
        }

        console.log('Unfrozen.');
        return cb();
    });
};
ManateeAdm.prototype.do_unfreeze.options = [ {
    names: ['help', 'h'],
    type: 'bool',
    help: 'Show this help'
}, {
    names: ['shard', 's'],
    type: 'string',
    helpArg: 'SHARD',
    help: 'The manatee shard',
    default: process.env.SHARD
}, {
    names: ['zk', 'z'],
    type: 'string',
    helpArg: 'ZOOKEEPER_URL',
    help: 'The zookeeper connection string. e.g. 127.0.0.1:2181',
    default: process.env.ZK_IPS
}];
ManateeAdm.prototype.do_unfreeze.help = (
    'Unfreeze a shard\'s topology. \n' +
    '\n' +
    'Usage:\n' +
    '    {{name}} unfreeze [OPTIONS]\n' +
    '\n' +
    '{{options}}'
);

/**
 * Sets one node write mode.
 */
ManateeAdm.prototype.do_set_onwm = function (subcmd, opts, args, cb) {
    var self = this;
    if (opts.help) {
        self.do_help('help', {}, [subcmd], cb);
    }

    if (!opts.shard) {
        self.do_help('help', {}, [subcmd], cb);
    }

    opts.mode = opts.mode.toLowerCase();
    if (['on', 'off'].indexOf(opts.mode) === -1) {
        self.do_help('help', {}, [subcmd], cb);
    }

    adm.setOnwm(opts, function (err) {
        if (err) {
            return cb(err);
        }

        console.log('One Node Write Mode set to: ' + opts.mode);
        return cb();
    });
};
ManateeAdm.prototype.do_set_onwm.options = [ {
    names: ['help', 'h'],
    type: 'bool',
    help: 'Show this help'
}, {
    names: ['shard', 's'],
    type: 'string',
    helpArg: 'SHARD',
    help: 'The manatee shard',
    default: process.env.SHARD
}, {
    names: ['mode', 'm'],
    type: 'string',
    helpArg: 'MODE',
    help: 'Must be either "on" or "off"'
}, {
    names: ['ignorePrompts', 'y'],
    type: 'bool',
    helpArg: 'IGNORE_PROMPTS',
    help: 'Set this to skip prompts (is dangerous) ',
    default: false
}, {
    names: ['zk', 'z'],
    type: 'string',
    helpArg: 'ZOOKEEPER_URL',
    help: 'The zookeeper connection string. e.g. 127.0.0.1:2181',
    default: process.env.ZK_IPS
}];
ManateeAdm.prototype.do_set_onwm.help = (
    'Set one node write mode. \n' +
    '\n' +
    '!!! WARNING !!!\n' +
    'Do not set or disable one node write mode unless you are sure you\n' +
    'know what you\'re doing.  In order for one node write mode to be\n' +
    'setd, the state must match what is in your configuration files for\n' +
    'Manatee.\n' +
    '\n' +
    'Usage:\n' +
    '    {{name}} set_onwm [OPTIONS]\n' +
    '\n' +
    '{{options}}'
);

/**
 * Removes deposed nodes.
 */
ManateeAdm.prototype.do_remove_deposed = function (subcmd, opts, args, cb) {
    var self = this;
    if (opts.help) {
        self.do_help('help', {}, [subcmd], cb);
    }

    if (!opts.shard) {
        self.do_help('help', {}, [subcmd], cb);
    }

    if (!opts.ip && !opts.zonename) {
        if (!opts.config) {
            self.do_help('help', {}, [subcmd], cb);
        }
        try {
            var cfg = JSON.parse(fs.readFileSync(opts.config, 'utf8'));
            opts.zonename = cfg.zoneId;
        } catch (e) {
            return cb(e);
        }
    }

    adm.removeDeposed(opts, function (err) {
        if (err) {
            return cb(err);
        }

        console.log('Ok.');
        return cb();
    });
};
ManateeAdm.prototype.do_remove_deposed.options = [ {
    names: ['help', 'h'],
    type: 'bool',
    help: 'Show this help'
}, {
    names: ['config', 'c'],
    type: 'string',
    helpArg: 'CONFIG',
    help: 'The path to the manatee sitter config',
    default: process.env.MANATEE_SITTER_CONFIG
}, {
    names: ['ip', 'i'],
    type: 'string',
    helpArg: 'IP',
    help: 'The ip of the node to remove'
}, {
    names: ['zonename', 'n'],
    type: 'string',
    helpArg: 'ZONENAME',
    help: 'The zonename of the node to remove'
}, {
    names: ['shard', 's'],
    type: 'string',
    helpArg: 'SHARD',
    help: 'The manatee shard',
    default: process.env.SHARD
}, {
    names: ['zk', 'z'],
    type: 'string',
    helpArg: 'ZOOKEEPER_URL',
    help: 'The zookeeper connection string. e.g. 127.0.0.1:2181',
    default: process.env.ZK_IPS
}];
ManateeAdm.prototype.do_remove_deposed.help = (
    'Moves a node out of the list of deposed manatees. \n' +
    '\n' +
    'After a primary has been deposed by a sync, the primary enters into a\n' +
    'deposed state.  Remove it from the deposed list after it has been\n' +
    'rebuilt.  You can either use the ip or the zonename to identify the\n' +
    'node to remove.  If zonename or ip isn\'t specified, this zonename\n' +
    'will be used.\n' +
    '\n' +
    'Usage:\n' +
    '    {{name}} remove_deposed [OPTIONS]\n' +
    '\n' +
    '{{options}}'
);

cmdln.main(new ManateeAdm(), {showErrStack: true});
